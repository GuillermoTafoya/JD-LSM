{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\garia\\\\Documents\\\\GitHub\\\\JD-LSM\\\\React Approach\\\\LSM-app\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useState, useEffect } from 'react';\nimport { useSessionStorage } from './components/useStorage.js';\nimport ReactDOM from \"react-dom/client\";\nimport { Routes, Route, useNavigate } from \"react-router-dom\";\nimport LoginView from './Pages/Login.js';\nimport UserView from './Pages/UserView.js';\nimport AchievementsView from './Pages/AchievementsView.js';\nimport GameView from './Pages/Game.js';\nimport ContactView from './Pages/Contact.js';\nimport ConfigurationView from './Pages/Configuration';\nimport StatisticsView from './Pages/Statistics';\nimport LeaderboardView from './Pages/LeaderboardView.js';\nimport NotAdmin from './Pages/NotAdmin.js';\nimport PageNotFound from './Pages/PageNotFound.js';\nimport ProfilePlaceholder from './assets/UserView/panda.png';\nimport NavBar from \"./components/navbar.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass user {\n  constructor(username, email, passwordHash, admin, img, wins, dob, coins, ordinaryNum, generalNum, helmetNum, totalNum, numAchUnlocked, achievements, weapons) {\n    this.username = username;\n    this.email = email;\n    this.passwordHash = passwordHash;\n    this.admin = admin;\n    this.dob = dob;\n    this.ordinaryNum = ordinaryNum;\n    this.generalNum = generalNum;\n    this.helmetNum = helmetNum;\n    this.totalNum = totalNum;\n    this.numAchUnlocked = numAchUnlocked;\n    this.weapons = weapons;\n    this.img = img;\n    this.wins = wins;\n    this.achievements = achievements;\n    this.coins = coins;\n  }\n\n}\n\nfunction App() {\n  _s();\n\n  const [userData, setUserData] = useSessionStorage('userData', null);\n  const [leaderboardData, setLeaderboardData] = useSessionStorage('leaderboardData', null);\n  const [statisticsData, setStatisticsData] = useSessionStorage('statisticsData', null);\n  const [loggedIn, setLoggedIn] = useSessionStorage('loggedIn', false);\n  let navigate = useNavigate();\n\n  function updateLoggedIn() {\n    sessionStorage.getItem('loggedIn');\n    /*\r\n    console.log(\r\n      \"Session Storage:\", \r\n      sessionStorage.getItem('user'), \r\n      sessionStorage.getItem('leaderboardData'), \r\n      sessionStorage.getItem('statisticsData'), \r\n      sessionStorage.getItem('loggedIn'))\r\n    console.log(\"Updating Logged In\")\r\n    */\n  }\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      updateLoggedIn();\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  const loginRouteChange = mode => async e => {\n    //console.log(\"mode of form: \",mode);\n    //console.log(\"e: \",e.target.elements);\n    //console.log(\"all use states 1: \",userData, leaderboardData, statisticsData, loggedIn);\n    e.preventDefault();\n    const usernameLogin = e.target[0].value;\n    const passwordLogin = e.target[1].value;\n    const usernameRegister = e.target[2].value;\n    const email = e.target[3].value;\n    const birthday = e.target[4].value;\n    const createPassword = e.target[5].value;\n    const repeatPassword = e.target[6].value;\n    sessionStorage.setItem(\"username\", usernameLogin);\n\n    if (mode === \"signup\") {\n      // CONDICIONAL PARA SABER SI ESTÁ EN LOGIN O EN SIGNUP, FALTA VALIDAR EL REPETIR CONTRASEÑAS\n      // REGISTRO\n      if (createPassword !== repeatPassword) {\n        alert(\"Las contraseñas no coincden\");\n        return;\n      }\n\n      const payload = {\n        username: usernameRegister,\n        email: email,\n        dob: birthday,\n        passwordRegister: createPassword\n      }; // Envía req\n\n      const response = await fetch(\"/userRegister\", {\n        method: \"POST\",\n        body: JSON.stringify(payload),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      const datosRegistro = await response.json(); // Obtiene res\n\n      if (!datosRegistro.invalidUsername && !datosRegistro.invalidEmail) {\n        // Valida que el usuario y el email no estén repetidos\n        alert(\"¡Datos de registro válidos!\"); // Prepara datos a ser enviados\n\n        const data = {\n          email: email,\n          password: createPassword\n        };\n        const opciones = {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(data)\n        }; // Hace request\n\n        const requestLogin = await fetch(\"http://localhost:5000/login\", opciones); // Obtiene respuesta de datos\n\n        const datos = await requestLogin.json();\n        setUserData(new user(datos.user.username, datos.user.email, datos.user.passwordHash, datos.user.admin, datos.user.img ? datos.user.img : ProfilePlaceholder, datos.user.wins, datos.user.dob, datos.user.coins, datos.user.ordinaryNum, datos.user.generalNum, datos.user.helmetNum, datos.user.totalNum, datos.user.numAchUnlocked, datos.user.achievements, datos.user.weapons)); // Hace request\n\n        const requestLeaderboard = await fetch(`http://localhost:5000/leaderboard?username=${datos.user.username}`, {\n          method: 'GET',\n          headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json'\n          }\n        });\n        const datosLeaderboard = await requestLeaderboard.json(); //console.log(\"leader\",datosLeaderboard)\n        // Obtiene respuesta de datos\n        //const datos = await requestLogin.json();\n\n        setLeaderboardData(datosLeaderboard); // Hace request\n\n        const requestStats = await fetch(\"http://localhost:5000/stats\", {\n          method: 'GET',\n          headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json'\n          }\n        });\n        const datosStats = await requestStats.json();\n        setStatisticsData({\n          // avgCoins, avgWins, avgOrdinary, avgGeneral, avgHelmet, avgTotal\n          labels: [\"Average Right Guesses\", \"Average Finished Modules\", \"Average Signs Learned\", \"Average Videos Watched\", \"Average Quizzes Taken\", \"Average Score\"],\n          data: [datosStats.avgCoins, datosStats.avgWins, datosStats.avgOrdinary, datosStats.avgGeneral, datosStats.avgHelmet, datosStats.avgTotal]\n        });\n        setLoggedIn(true);\n        sessionStorage.setItem('user', JSON.stringify(userData));\n        sessionStorage.setItem('leaderboardData', JSON.stringify(leaderboardData));\n        sessionStorage.setItem('statisticsData', JSON.stringify(statisticsData));\n        sessionStorage.setItem('loggedIn', JSON.stringify(loggedIn)); //console.log(\"all use states 0: \",userData, leaderboardData, statisticsData, loggedIn);\n        //console.log(\"all session storage: \",sessionStorage.getItem('user'), sessionStorage.getItem('leaderboardData'), sessionStorage.getItem('statisticsData'), sessionStorage.getItem('loggedIn'));\n        //console.log(\"Cccc\", sessionStorage.getItem('user'));\n\n        let path = 'usuario';\n        navigate(path);\n      } else if (datosRegistro.invalidUsername && !datosRegistro.invalidEmail) {\n        // Valida el usuario\n        alert(\"Este usuario ya está siendo usado\");\n      } else if (datosRegistro.invalidEmail && !datosRegistro.invalidUsername) {\n        // Valida el email\n        alert(\"Este email ya está siendo usado\");\n      } else {\n        alert(\"El email y el usuario ya están siendo usados\");\n      } // / REGISTRO\n\n    } else {\n      // ESTÁ EN LOGIN\n      // Validar Login:\n      // Prepara datos a ser enviados\n      const data = {\n        email: usernameLogin,\n        password: passwordLogin\n      };\n      const opciones = {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(data)\n      }; // Hace request\n\n      const requestLogin = await fetch(\"http://localhost:5000/login\", opciones); // Obtiene respuesta de datos\n\n      const datos = await requestLogin.json(); //console.log(\"Datos:\",datos);\n\n      if (datos.isLogin) {\n        // Si el login fue correcto\n        setUserData(new user(datos.user.username, datos.user.email, datos.user.passwordHash, datos.user.admin, datos.user.img ? datos.user.img : ProfilePlaceholder, datos.user.wins, datos.user.dob, datos.user.coins, datos.user.ordinaryNum, datos.user.generalNum, datos.user.helmetNum, datos.user.totalNum, datos.user.numAchUnlocked, datos.user.achievements, datos.user.weapons)); //alert(\"¡Datos de Login Correctos!\");\n        // Hace request\n\n        const requestLeaderboard = await fetch(`http://localhost:5000/leaderboard?username=${datos.user.username}`, {\n          method: 'GET',\n          headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json'\n          }\n        });\n        const datosLeaderboard = await requestLeaderboard.json(); //console.log(\"leader\",datosLeaderboard)\n        // Obtiene respuesta de datos\n        //const datos = await requestLogin.json();\n\n        setLeaderboardData(datosLeaderboard); // Hace request\n\n        const requestStats = await fetch(\"http://localhost:5000/stats\", {\n          method: 'GET',\n          headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json'\n          }\n        });\n        const datosStats = await requestStats.json();\n        setStatisticsData({\n          // avgCoins, avgWins, avgOrdinary, avgGeneral, avgHelmet, avgTotal\n          labels: [\"Average Coins\", \"Average Wins\", \"Average Ordinary\", \"Average General\", \"Average Helmet\", \"Average Total Army\"],\n          data: [datosStats.avgCoins, datosStats.avgWins, datosStats.avgOrdinary, datosStats.avgGeneral, datosStats.avgHelmet, datosStats.avgTotal]\n        });\n        setLoggedIn(true);\n        sessionStorage.setItem('user', JSON.stringify(userData));\n        sessionStorage.setItem('leaderboardData', JSON.stringify(leaderboardData));\n        sessionStorage.setItem('statisticsData', JSON.stringify(statisticsData));\n        sessionStorage.setItem('loggedIn', JSON.stringify(loggedIn)); //console.log(\"all use states 0: \",userData, leaderboardData, statisticsData, loggedIn);\n        //console.log(\"all session storage: \",sessionStorage.getItem('user'), sessionStorage.getItem('leaderboardData'), sessionStorage.getItem('statisticsData'), sessionStorage.getItem('loggedIn'));\n        //console.log(\"Cccc\", sessionStorage.getItem('user'));  \n        //console.log(\"all use states 2: \",userData, leaderboardData, statisticsData, loggedIn);\n\n        let path = 'usuario';\n        navigate(path); // Validar contraseña repetida\n      } else {\n        alert(\"Datos de Login incorrectos\");\n      }\n    } //setUserData(new user(\"Usuario12345\", ProfilePlaceholder,0, [100,100,50], [\"false\",\"false\",\"true\",\"true\",\"false\",\"false\"], 500));\n\n  };\n  /*\r\n  Flow:\r\n  Login, if not logged in -> do not show pages -> redirect to login\r\n  Get data & insert as props \r\n  Maybe loading screen to get all data? \r\n  Get ALL data just after logging in\r\n  \r\n  */\n\n\n  if (loggedIn === true) {\n    //console.log(\"Control:\",userData)\n    //console.log(\"Control2222:\",loggedIn)\n    return /*#__PURE__*/_jsxDEV(LoggedInSection, {\n      fun: loginRouteChange,\n      userData: userData,\n      leaderboardData: leaderboardData,\n      statisticsData: statisticsData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 7\n    }, this);\n  } else if (loggedIn === false) {\n    return /*#__PURE__*/_jsxDEV(NotLoggedIn, {\n      fun: loginRouteChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 7\n    }, this);\n  } else {\n    console.log(\"Error:\", loggedIn);\n    setLoggedIn(false);\n  }\n}\n\n_s(App, \"fI6w6UemRSUsTvJuIZSXlFF5hPw=\", false, function () {\n  return [useSessionStorage, useSessionStorage, useSessionStorage, useSessionStorage, useNavigate];\n});\n\n_c = App;\n\nclass NotLoggedIn extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      fun: this.props.fun\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: /*#__PURE__*/_jsxDEV(Route, {\n          path: \"*\",\n          element: /*#__PURE__*/_jsxDEV(LoginView, {\n            mode: 'login',\n            onSubmit: this.state.fun\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 361,\n            columnNumber: 38\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass LoggedInSection extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      fun: this.props.fun,\n      userData: this.props.userData,\n      leaderboardData: this.props.leaderboardData,\n      statisticsData: this.props.statisticsData,\n      currentPage: 'usuario',\n      showNav: true\n    };\n    this.updateState = this.updateState.bind(this);\n    this.updateCurrentPage = this.updateCurrentPage.bind(this);\n    this.updateNavbar = this.updateNavbar.bind(this); //console.log(\"Control1:\",this.state.userData)\n    //console.log(\"Control2:\",this.props.userData)\n  }\n\n  componentDidMount() {\n    this.updateState();\n    setInterval(this.updateState, 1e3); // x seconds\n  }\n\n  updateNavbar() {\n    this.setState({\n      showNav: !this.state.showNav\n    });\n  }\n\n  async updateData() {\n    try {\n      //console.log(\"Initial State:\", this.state)\n      // Print session storage\n\n      /*\r\n      console.log(\r\n        \"Session Storage:\", \r\n        sessionStorage.getItem('user'), \r\n        sessionStorage.getItem('leaderboardData'), \r\n        sessionStorage.getItem('statisticsData'), \r\n        sessionStorage.getItem('loggedIn'))\r\n      */\n      const userFromSession = JSON.parse(sessionStorage.getItem('userData'));\n      const requestUser = await fetch(`http://localhost:5000/user?username=${userFromSession.username}`, {\n        method: 'GET',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json'\n        }\n      });\n      const datos = await requestUser.json();\n      const requestLeaderboard = await fetch(`http://localhost:5000/leaderboard?username=${datos.username}`, {\n        method: 'GET',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json'\n        }\n      });\n      const datosLeaderboard = await requestLeaderboard.json();\n      const requestStats = await fetch(\"http://localhost:5000/stats\", {\n        method: 'GET',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json'\n        }\n      });\n      const datosStats = await requestStats.json();\n      const newData = {\n        userData: new user(datos.username, datos.email, datos.passwordHash, datos.admin, datos.img ? datos.img : ProfilePlaceholder, datos.wins, datos.dob, datos.coins, datos.ordinaryNum, datos.generalNum, datos.helmetNum, datos.totalNum, datos.numAchUnlocked, datos.achievements, datos.weapons),\n        leaderboardData: datosLeaderboard,\n        statisticsData: {\n          labels: [\"Average Coins\", \"Average Wins\", \"Average Ordinary\", \"Average General\", \"Average Helmet\", \"Average Total Army\"],\n          data: [datosStats.avgCoins, datosStats.avgWins, datosStats.avgOrdinary, datosStats.avgGeneral, datosStats.avgHelmet, datosStats.avgTotal]\n        }\n      }; //console.log(\"New Data:\", newData)\n      //console.log(\"Updated State:\", this.state)\n\n      return newData;\n    } catch (error) {\n      console.log(\"Error:\", error);\n    }\n  }\n\n  updateState() {\n    //console.log(this.state.currentPage)\n    if (this.state.currentPage !== 'juego') {\n      this.updateData().then(data => {\n        //console.log(\"Updated\")\n        //console.log(\"Data:\", data)\n        this.setState(data); //console.log(\"Debug\",this.state.userData)\n\n        sessionStorage.setItem('userData', JSON.stringify(this.state.userData));\n        sessionStorage.setItem('leaderboardData', JSON.stringify(this.state.leaderboardData));\n        sessionStorage.setItem('statisticsData', JSON.stringify(this.state.statisticsData));\n      });\n    }\n  }\n\n  updateCurrentPage(page) {\n    this.setState({\n      currentPage: page\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [this.state.showNav && /*#__PURE__*/_jsxDEV(NavBar, {\n        data: this.state.userData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 494,\n        columnNumber: 34\n      }, this), /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(UserView, {\n            data: this.state.userData,\n            updateCurrentPage: this.updateCurrentPage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 496,\n            columnNumber: 38\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 496,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"logros\",\n          element: /*#__PURE__*/_jsxDEV(AchievementsView, {\n            data: this.state.userData,\n            updateCurrentPage: this.updateCurrentPage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 497,\n            columnNumber: 43\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"usuario\",\n          element: /*#__PURE__*/_jsxDEV(UserView, {\n            data: this.state.userData,\n            updateCurrentPage: this.updateCurrentPage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 498,\n            columnNumber: 45\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 498,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"juego\",\n          element: /*#__PURE__*/_jsxDEV(GameView, {\n            data: this.state.userData,\n            updateCurrentPage: this.updateCurrentPage,\n            updateNavbar: this.updateNavbar\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 499,\n            columnNumber: 43\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 499,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"configuracion\",\n          element: /*#__PURE__*/_jsxDEV(ConfigurationView, {\n            data: this.state.userData,\n            updateCurrentPage: this.updateCurrentPage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 500,\n            columnNumber: 51\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 500,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"soporte\",\n          element: /*#__PURE__*/_jsxDEV(ContactView, {\n            updateCurrentPage: this.updateCurrentPage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 501,\n            columnNumber: 45\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"estadisticas\",\n          element: this.state.userData.admin ? /*#__PURE__*/_jsxDEV(StatisticsView, {\n            data: this.state.statisticsData,\n            updateCurrentPage: this.updateCurrentPage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 502,\n            columnNumber: 78\n          }, this) : /*#__PURE__*/_jsxDEV(NotAdmin, {\n            updateCurrentPage: this.updateCurrentPage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 502,\n            columnNumber: 175\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 502,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"leaderboard\",\n          element: /*#__PURE__*/_jsxDEV(LeaderboardView, {\n            data: this.state.leaderboardData,\n            user: this.state.userData,\n            updateCurrentPage: this.updateCurrentPage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 503,\n            columnNumber: 49\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 503,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"*\",\n          element: /*#__PURE__*/_jsxDEV(PageNotFound, {\n            updateCurrentPage: this.updateCurrentPage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 504,\n            columnNumber: 38\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 504,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 495,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 493,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Component","useState","useEffect","useSessionStorage","ReactDOM","Routes","Route","useNavigate","LoginView","UserView","AchievementsView","GameView","ContactView","ConfigurationView","StatisticsView","LeaderboardView","NotAdmin","PageNotFound","ProfilePlaceholder","NavBar","user","constructor","username","email","passwordHash","admin","img","wins","dob","coins","ordinaryNum","generalNum","helmetNum","totalNum","numAchUnlocked","achievements","weapons","App","userData","setUserData","leaderboardData","setLeaderboardData","statisticsData","setStatisticsData","loggedIn","setLoggedIn","navigate","updateLoggedIn","sessionStorage","getItem","interval","setInterval","clearInterval","loginRouteChange","mode","e","preventDefault","usernameLogin","target","value","passwordLogin","usernameRegister","birthday","createPassword","repeatPassword","setItem","alert","payload","passwordRegister","response","fetch","method","body","JSON","stringify","headers","datosRegistro","json","invalidUsername","invalidEmail","data","password","opciones","requestLogin","datos","requestLeaderboard","Accept","datosLeaderboard","requestStats","datosStats","labels","avgCoins","avgWins","avgOrdinary","avgGeneral","avgHelmet","avgTotal","path","isLogin","console","log","NotLoggedIn","props","state","fun","render","LoggedInSection","currentPage","showNav","updateState","bind","updateCurrentPage","updateNavbar","componentDidMount","setState","updateData","userFromSession","parse","requestUser","newData","error","then","page"],"sources":["C:/Users/garia/Documents/GitHub/JD-LSM/React Approach/LSM-app/src/App.js"],"sourcesContent":["import React, { Component, useState, useEffect } from 'react';\r\n\r\n\r\nimport { useSessionStorage } from './components/useStorage.js';\r\n\r\nimport ReactDOM from \"react-dom/client\";\r\nimport {Routes, Route, useNavigate} from \"react-router-dom\";\r\n\r\nimport LoginView from './Pages/Login.js';\r\nimport UserView from './Pages/UserView.js';\r\nimport AchievementsView from './Pages/AchievementsView.js';\r\nimport GameView from './Pages/Game.js';\r\nimport ContactView from './Pages/Contact.js';\r\nimport ConfigurationView from './Pages/Configuration';\r\nimport StatisticsView from './Pages/Statistics';\r\nimport LeaderboardView from './Pages/LeaderboardView.js';\r\nimport NotAdmin from './Pages/NotAdmin.js';\r\n\r\nimport PageNotFound from './Pages/PageNotFound.js';\r\n\r\nimport ProfilePlaceholder from './assets/UserView/panda.png'; \r\n\r\nimport NavBar from \"./components/navbar.js\";\r\n\r\n\r\nclass user{\r\n  constructor(username, email, passwordHash, admin, img, wins, dob, coins, ordinaryNum, generalNum, helmetNum, totalNum, numAchUnlocked, achievements, weapons) {\r\n    this.username = username;\r\n    this.email = email ;\r\n    this.passwordHash = passwordHash;\r\n    this.admin = admin ;\r\n    this.dob = dob ;\r\n    this.ordinaryNum = ordinaryNum ;\r\n    this.generalNum = generalNum ;\r\n    this.helmetNum = helmetNum ;\r\n    this.totalNum = totalNum ;\r\n    this.numAchUnlocked = numAchUnlocked ;\r\n    this.weapons = weapons ;\r\n    this.img = img;\r\n    this.wins = wins;\r\n    this.achievements = achievements;\r\n    this.coins = coins;\r\n}\r\n}\r\n\r\nfunction App() {\r\n  const [userData, setUserData] = useSessionStorage('userData',null);\r\n  const [leaderboardData, setLeaderboardData] = useSessionStorage('leaderboardData',null);\r\n  const [statisticsData, setStatisticsData] = useSessionStorage('statisticsData',null);\r\n  const [loggedIn, setLoggedIn] = useSessionStorage('loggedIn',false);\r\n  let navigate = useNavigate()\r\n\r\n\r\n  function updateLoggedIn(){\r\n    sessionStorage.getItem('loggedIn') \r\n    \r\n\r\n    \r\n    /*\r\n    console.log(\r\n      \"Session Storage:\", \r\n      sessionStorage.getItem('user'), \r\n      sessionStorage.getItem('leaderboardData'), \r\n      sessionStorage.getItem('statisticsData'), \r\n      sessionStorage.getItem('loggedIn'))\r\n    console.log(\"Updating Logged In\")\r\n    */\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      updateLoggedIn();\r\n    }, 1000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  \r\n\r\n  const loginRouteChange = mode => async (e) =>{ \r\n    //console.log(\"mode of form: \",mode);\r\n    //console.log(\"e: \",e.target.elements);\r\n    //console.log(\"all use states 1: \",userData, leaderboardData, statisticsData, loggedIn);\r\n    e.preventDefault();\r\n    const usernameLogin = e.target[0].value;\r\n    const passwordLogin = e.target[1].value;\r\n    const usernameRegister = e.target[2].value;\r\n    const email = e.target[3].value;\r\n    const birthday = e.target[4].value;\r\n    const createPassword  = e.target[5].value; \r\n    const repeatPassword = e.target[6].value;\r\n    sessionStorage.setItem(\"username\", usernameLogin);\r\n    if (mode === \"signup\"){ // CONDICIONAL PARA SABER SI ESTÁ EN LOGIN O EN SIGNUP, FALTA VALIDAR EL REPETIR CONTRASEÑAS\r\n\r\n      // REGISTRO\r\n      if( createPassword  !== repeatPassword){\r\n        alert(\"Las contraseñas no coincden\");\r\n        return;\r\n      }\r\n      const payload = {\r\n        username: usernameRegister, email: email, dob: birthday, passwordRegister: createPassword\r\n      }\r\n\r\n      // Envía req\r\n      const response = await fetch(\"/userRegister\", {\r\n        method: \"POST\", \r\n        body: JSON.stringify(payload),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\" \r\n        }\r\n      });\r\n    \r\n      const datosRegistro = await response.json(); // Obtiene res\r\n\r\n      if(!datosRegistro.invalidUsername && !datosRegistro.invalidEmail){ // Valida que el usuario y el email no estén repetidos\r\n        alert(\"¡Datos de registro válidos!\");\r\n      // Prepara datos a ser enviados\r\n      const data = { email: email, password: createPassword}; \r\n      const opciones = {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(data),\r\n      };\r\n\r\n      // Hace request\r\n      const requestLogin = await fetch(\"http://localhost:5000/login\", opciones);\r\n\r\n\r\n      // Obtiene respuesta de datos\r\n      const datos = await requestLogin.json();\r\n        setUserData(new user(\r\n          datos.user.username, datos.user.email, datos.user.passwordHash, datos.user.admin, datos.user.img ? datos.user.img : ProfilePlaceholder , datos.user.wins, datos.user.dob, datos.user.coins,\r\n          datos.user.ordinaryNum, datos.user.generalNum, datos.user.helmetNum, datos.user.totalNum, datos.user.numAchUnlocked, datos.user.achievements, datos.user.weapons\r\n          ));\r\n\r\n      // Hace request\r\n      const requestLeaderboard = await fetch(`http://localhost:5000/leaderboard?username=${datos.user.username}`, {\r\n        method: 'GET',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'Content-Type': 'application/json',\r\n            }\r\n    })\r\n      \r\n      \r\n      const datosLeaderboard = await requestLeaderboard.json();\r\n      //console.log(\"leader\",datosLeaderboard)\r\n\r\n\r\n      // Obtiene respuesta de datos\r\n      //const datos = await requestLogin.json();\r\n          \r\n          setLeaderboardData(\r\n            datosLeaderboard\r\n          )\r\n\r\n\r\n          // Hace request\r\n      const requestStats = await fetch(\"http://localhost:5000/stats\", {\r\n        method: 'GET',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'Content-Type': 'application/json',\r\n            }\r\n    })\r\n      \r\n      \r\n          const datosStats= await requestStats.json();\r\n\r\n          setStatisticsData(\r\n            {\r\n              // avgCoins, avgWins, avgOrdinary, avgGeneral, avgHelmet, avgTotal\r\n              labels: [\"Average Right Guesses\", \"Average Finished Modules\", \"Average Signs Learned\", \"Average Videos Watched\", \"Average Quizzes Taken\", \"Average Score\"],\r\n              data: [datosStats.avgCoins, datosStats.avgWins, datosStats.avgOrdinary, datosStats.avgGeneral, datosStats.avgHelmet, datosStats.avgTotal]\r\n            }\r\n          )\r\n\r\n          setLoggedIn(true);\r\n\r\n            sessionStorage.setItem('user', JSON.stringify(userData));\r\n            sessionStorage.setItem('leaderboardData', JSON.stringify(leaderboardData));\r\n            sessionStorage.setItem('statisticsData', JSON.stringify(statisticsData));\r\n            sessionStorage.setItem('loggedIn', JSON.stringify(loggedIn));\r\n        \r\n            //console.log(\"all use states 0: \",userData, leaderboardData, statisticsData, loggedIn);\r\n            //console.log(\"all session storage: \",sessionStorage.getItem('user'), sessionStorage.getItem('leaderboardData'), sessionStorage.getItem('statisticsData'), sessionStorage.getItem('loggedIn'));\r\n            //console.log(\"Cccc\", sessionStorage.getItem('user'));\r\n\r\n          let path = 'usuario'; \r\n          navigate(path);\r\n      }else if(datosRegistro.invalidUsername && !datosRegistro.invalidEmail){// Valida el usuario\r\n        alert(\"Este usuario ya está siendo usado\");\r\n      }else if(datosRegistro.invalidEmail && !datosRegistro.invalidUsername){ // Valida el email\r\n        alert(\"Este email ya está siendo usado\");\r\n      }else{\r\n        alert(\"El email y el usuario ya están siendo usados\");\r\n      }\r\n        \r\n      // / REGISTRO\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    else{ // ESTÁ EN LOGIN\r\n      // Validar Login:\r\n\r\n      // Prepara datos a ser enviados\r\n      const data = { email: usernameLogin, password: passwordLogin}; \r\n      const opciones = {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(data),\r\n      };\r\n\r\n      // Hace request\r\n      const requestLogin = await fetch(\"http://localhost:5000/login\", opciones);\r\n      // Obtiene respuesta de datos\r\n      const datos = await requestLogin.json();\r\n    \r\n      //console.log(\"Datos:\",datos);\r\n\r\n      if (datos.isLogin) { // Si el login fue correcto\r\n\r\n\r\n        setUserData(new user(\r\n          datos.user.username, datos.user.email, datos.user.passwordHash, datos.user.admin, datos.user.img ? datos.user.img : ProfilePlaceholder, datos.user.wins, datos.user.dob, datos.user.coins,\r\n          datos.user.ordinaryNum, datos.user.generalNum, datos.user.helmetNum, datos.user.totalNum, datos.user.numAchUnlocked, datos.user.achievements, datos.user.weapons\r\n          ));\r\n\r\n        //alert(\"¡Datos de Login Correctos!\");\r\n\r\n\r\n        // Hace request\r\n        const requestLeaderboard = await fetch(`http://localhost:5000/leaderboard?username=${datos.user.username}`, {\r\n          method: 'GET',\r\n              headers: {\r\n                  Accept: 'application/json',\r\n                  'Content-Type': 'application/json',\r\n              }\r\n      })\r\n        \r\n        \r\n        const datosLeaderboard = await requestLeaderboard.json();\r\n        //console.log(\"leader\",datosLeaderboard)\r\n  \r\n  \r\n        // Obtiene respuesta de datos\r\n        //const datos = await requestLogin.json();\r\n            \r\n            setLeaderboardData(\r\n              datosLeaderboard\r\n            )\r\n\r\n        // Hace request\r\n      const requestStats = await fetch(\"http://localhost:5000/stats\", {\r\n        method: 'GET',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'Content-Type': 'application/json',\r\n            }\r\n    })\r\n      \r\n      \r\n          const datosStats= await requestStats.json();\r\n\r\n          setStatisticsData(\r\n            {\r\n              // avgCoins, avgWins, avgOrdinary, avgGeneral, avgHelmet, avgTotal\r\n              labels: [\"Average Coins\", \"Average Wins\", \"Average Ordinary\", \"Average General\", \"Average Helmet\", \"Average Total Army\"],\r\n              data: [datosStats.avgCoins, datosStats.avgWins, datosStats.avgOrdinary, datosStats.avgGeneral, datosStats.avgHelmet, datosStats.avgTotal]\r\n            }\r\n          )\r\n\r\n\r\n        setLoggedIn(true);\r\n\r\n\r\n        \r\n    \r\n          sessionStorage.setItem('user', JSON.stringify(userData));\r\n          sessionStorage.setItem('leaderboardData', JSON.stringify(leaderboardData));\r\n          sessionStorage.setItem('statisticsData', JSON.stringify(statisticsData));\r\n          sessionStorage.setItem('loggedIn', JSON.stringify(loggedIn));\r\n      \r\n          //console.log(\"all use states 0: \",userData, leaderboardData, statisticsData, loggedIn);\r\n          //console.log(\"all session storage: \",sessionStorage.getItem('user'), sessionStorage.getItem('leaderboardData'), sessionStorage.getItem('statisticsData'), sessionStorage.getItem('loggedIn'));\r\n          //console.log(\"Cccc\", sessionStorage.getItem('user'));  \r\n      \r\n        \r\n\r\n        //console.log(\"all use states 2: \",userData, leaderboardData, statisticsData, loggedIn);\r\n\r\n        let path = 'usuario'; \r\n        navigate(path);\r\n        // Validar contraseña repetida\r\n\r\n      } else {\r\n        alert(\"Datos de Login incorrectos\");\r\n      }\r\n\r\n    }\r\n\r\n  //setUserData(new user(\"Usuario12345\", ProfilePlaceholder,0, [100,100,50], [\"false\",\"false\",\"true\",\"true\",\"false\",\"false\"], 500));\r\n  \r\n  \r\n  \r\n  }\r\n  \r\n/*\r\nFlow:\r\nLogin, if not logged in -> do not show pages -> redirect to login\r\nGet data & insert as props \r\nMaybe loading screen to get all data? \r\nGet ALL data just after logging in\r\n\r\n*/\r\n\r\n  \r\n  \r\n  if (loggedIn === true){\r\n    //console.log(\"Control:\",userData)\r\n    //console.log(\"Control2222:\",loggedIn)\r\n    return (\r\n      <LoggedInSection fun={loginRouteChange} userData={userData} leaderboardData={leaderboardData} statisticsData={statisticsData} />\r\n    );\r\n  }\r\n  else if (loggedIn === false){\r\n    return(\r\n      <NotLoggedIn fun={loginRouteChange} />\r\n    );\r\n    \r\n  }\r\n  else {\r\n    console.log(\"Error:\",loggedIn)\r\n    setLoggedIn(false)\r\n  }\r\n    \r\n}\r\n\r\nclass NotLoggedIn extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      fun : this.props.fun\r\n    }\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <div className=\"app\">\r\n        <Routes>\r\n            <Route path=\"*\" element={<LoginView mode={'login'} onSubmit={this.state.fun} /> } />\r\n        </Routes>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass LoggedInSection extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      fun: this.props.fun,\r\n      userData : this.props.userData,\r\n      leaderboardData : this.props.leaderboardData,\r\n      statisticsData : this.props.statisticsData,\r\n      currentPage: 'usuario',\r\n      showNav: true,\r\n  }\r\n    \r\n    this.updateState = this.updateState.bind(this);\r\n    this.updateCurrentPage = this.updateCurrentPage.bind(this);\r\n    this.updateNavbar = this.updateNavbar.bind(this);\r\n    //console.log(\"Control1:\",this.state.userData)\r\n    //console.log(\"Control2:\",this.props.userData)\r\n  }\r\n\r\n\r\n\r\n  componentDidMount() {\r\n    this.updateState()\r\n    setInterval(this.updateState, 1e3); // x seconds\r\n  }\r\n  updateNavbar(){\r\n    this.setState({\r\n      showNav: !this.state.showNav\r\n    })\r\n  }\r\n\r\n  async updateData(){\r\n    \r\n    try{\r\n      //console.log(\"Initial State:\", this.state)\r\n      // Print session storage\r\n      /*\r\n      console.log(\r\n        \"Session Storage:\", \r\n        sessionStorage.getItem('user'), \r\n        sessionStorage.getItem('leaderboardData'), \r\n        sessionStorage.getItem('statisticsData'), \r\n        sessionStorage.getItem('loggedIn'))\r\n      */\r\n    const userFromSession = JSON.parse(sessionStorage.getItem('userData'));\r\n\r\n\r\n      const requestUser = await fetch(`http://localhost:5000/user?username=${userFromSession.username}`, {\r\n        method: 'GET',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'Content-Type': 'application/json',\r\n            }\r\n    })\r\n      const datos = await requestUser.json();\r\n\r\n      \r\n      const requestLeaderboard = await fetch(`http://localhost:5000/leaderboard?username=${datos.username}`, {\r\n        method: 'GET',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'Content-Type': 'application/json',\r\n            }\r\n    })\r\n        const datosLeaderboard = await requestLeaderboard.json();\r\n\r\n        const requestStats = await fetch(\"http://localhost:5000/stats\", {\r\n          method: 'GET',\r\n              headers: {\r\n                  Accept: 'application/json',\r\n                  'Content-Type': 'application/json',\r\n              }\r\n      })\r\n            const datosStats= await requestStats.json();\r\n\r\n            const newData = {\r\n              userData: new user(\r\n              datos.username, datos.email, datos.passwordHash, datos.admin, datos.img ? datos.img : ProfilePlaceholder, datos.wins, datos.dob, datos.coins,\r\n              datos.ordinaryNum, datos.generalNum, datos.helmetNum, datos.totalNum, datos.numAchUnlocked, datos.achievements, datos.weapons\r\n              ),\r\n              leaderboardData: datosLeaderboard,\r\n              statisticsData:{\r\n                labels: [\"Average Coins\", \"Average Wins\", \"Average Ordinary\", \"Average General\", \"Average Helmet\", \"Average Total Army\"],\r\n                data: [datosStats.avgCoins, datosStats.avgWins, datosStats.avgOrdinary, datosStats.avgGeneral, datosStats.avgHelmet, datosStats.avgTotal]\r\n              },\r\n            }\r\n            //console.log(\"New Data:\", newData)\r\n            //console.log(\"Updated State:\", this.state)\r\n\r\n            return newData;\r\n      }\r\n      catch(error){\r\n        console.log(\"Error:\", error)\r\n      }\r\n}\r\nupdateState(){\r\n  //console.log(this.state.currentPage)\r\n    if (this.state.currentPage !== 'juego'){\r\n      this.updateData().then(data => {\r\n        //console.log(\"Updated\")\r\n        //console.log(\"Data:\", data)\r\n        this.setState(\r\n          data\r\n        );\r\n        //console.log(\"Debug\",this.state.userData)\r\n        sessionStorage.setItem('userData', JSON.stringify(this.state.userData));\r\n        sessionStorage.setItem('leaderboardData', JSON.stringify(this.state.leaderboardData));\r\n        sessionStorage.setItem('statisticsData', JSON.stringify(this.state.statisticsData));\r\n      }\r\n      )\r\n    }\r\n  \r\n}\r\n  updateCurrentPage(page){\r\n    this.setState({currentPage: page})\r\n  }  \r\n    render(){\r\n      return(\r\n        <div className=\"App\">\r\n          {this.state.showNav && <NavBar data = {this.state.userData} />}\r\n          <Routes>\r\n            <Route path=\"/\" element={<UserView data = {this.state.userData} updateCurrentPage={this.updateCurrentPage} /> } />\r\n            <Route path=\"logros\" element={<AchievementsView data = {this.state.userData} updateCurrentPage={this.updateCurrentPage}/>} /> \r\n            <Route path=\"usuario\" element={ <UserView data = {this.state.userData} updateCurrentPage={this.updateCurrentPage}/>} />\r\n            <Route path=\"juego\" element={ <GameView data = {this.state.userData} updateCurrentPage={this.updateCurrentPage} updateNavbar={this.updateNavbar} />} />\r\n            <Route path=\"configuracion\" element={ <ConfigurationView data = {this.state.userData} updateCurrentPage={this.updateCurrentPage}/>} />\r\n            <Route path=\"soporte\" element={ <ContactView updateCurrentPage={this.updateCurrentPage}/>} />\r\n            <Route path=\"estadisticas\" element={ this.state.userData.admin ? <StatisticsView data = {this.state.statisticsData} updateCurrentPage={this.updateCurrentPage}/> :< NotAdmin updateCurrentPage={this.updateCurrentPage}/>} />\r\n            <Route path=\"leaderboard\" element={ <LeaderboardView data = {this.state.leaderboardData} user = {this.state.userData} updateCurrentPage={this.updateCurrentPage}/>} />\r\n            <Route path=\"*\" element={<PageNotFound updateCurrentPage={this.updateCurrentPage}/> } />\r\n          </Routes>\r\n        </div>\r\n      );\r\n    }\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}