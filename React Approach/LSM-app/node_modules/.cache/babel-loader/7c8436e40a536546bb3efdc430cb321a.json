{"ast":null,"code":"import modelUser from \"./api.model.user.js\";\nimport modelMessage from \"./api.model.support.js\";\nimport User from \"./api.model.user.js\"; //const crypto = require(\"crypto-js\");\n\nimport crypto from \"crypto\"; //import { toBePartiallyChecked } from \"@testing-library/jest-dom/dist/matchers.js\";\n// Get all registered users, funciona\n\nexport async function getUsers(req, res) {\n  const users = await modelUser.find();\n  res.json(users);\n}\nexport async function getUserData2(req, res) {\n  const userData = await modelUser.find({\n    username: req.params.username\n  });\n  res.json(userData[0]);\n} // Get specific user data, funciona\n\nexport async function getUserData(req, res) {\n  // First, we retrieve the user from the DB\n  const users = await User.find();\n  const user = users.filter(u => u.username === req.query.username)[0];\n  return res.json(user);\n} // Put specific user data, funciona, poner datos en body\n\nexport async function putUserData(req, res) {\n  const userputData = await modelUser.findOneAndUpdate({\n    \"username\": req.params.username\n  }, req.body, {\n    new: true\n  });\n  res.json(userputData);\n} // Create a new user through sign up form\n\nexport async function postUser(req, res) {\n  const {\n    username,\n    email,\n    dob,\n    passwordRegister\n  } = req.body;\n  const doesEmailExists = await modelUser.isThisEmailInUse(email);\n  const doesUsernameExists = await modelUser.isThisUsernameInUse(username);\n\n  if (!doesEmailExists && !doesUsernameExists) {\n    const passwordHash = crypto.createHash(\"sha512\").update(passwordRegister).digest(\"base64\");\n    const usuario = new modelUser({\n      username,\n      email,\n      passwordHash,\n      admin: \"false\",\n      img: \"\",\n      dob,\n      wins: 0,\n      coins: \"0\",\n      ordinaryNum: 0,\n      generalNum: 0,\n      helmetNum: 0,\n      totalNum: 0,\n      coins: 0,\n      numAchUnlocked: 0,\n      achievements: [false, false, false, false, false, false],\n      weapons: [false, false, false, false]\n    });\n    await usuario.save();\n    res.status(200).json({\n      usuario,\n      invalidEmail: doesEmailExists,\n      invalidUsername: doesUsernameExists\n    });\n  } else {\n    res.status(404).json({\n      error: \"El usuario y/o email ya est치n siendo usados por otro usuario\",\n      invalidEmail: doesEmailExists,\n      invalidUsername: doesUsernameExists\n    });\n  }\n} // Delete user from DB\n// no funciona\n\nexport async function deleteUser(req, res) {\n  const {\n    username\n  } = req.body;\n  const user = await modelUser.findOneAndDelete({\n    username: username\n  });\n  res.status(200).json({\n    msg: \"User deleted.\"\n  });\n} // No est치 bien\n\nexport async function user(req, res) {\n  const doc = {\n    username: res.params.users,\n    admin: \"false\",\n    email: res.params.email,\n    wins: 0,\n    dob: \"\",\n    passwordHash: res.params.password,\n    score: \"0\",\n    helmetNum: 0,\n    ordinaryNum: 0,\n    generalNum: 0,\n    totalNum: 0,\n    coins: 0,\n    numAchUnlocked: 0,\n    weapon: \"false\",\n    weapon2: \"false\",\n    weapon3: \"false\",\n    weapon4: \"false\"\n  };\n  const userPost = await postUser.insertOne(doc);\n}\nexport async function updateUserImg(req, res) {\n  const {\n    username,\n    img\n  } = req.body; // First, we retrieve the user from the DB\n\n  const users = await User.find();\n  const user = users.filter(u => u.username === username)[0]; // Filtra por username\n  // Then, we update the user with the given fields\n\n  const newUser = {\n    username: user.username,\n    email: user.email,\n    passwordHash: user.passwordHash,\n    dob: user.dob,\n    admin: user.admin,\n    img: img,\n    wins: user.wins,\n    coins: user.coins,\n    ordinaryNum: user.ordinaryNum,\n    generalNum: user.generalNum,\n    helmetNum: user.helmetNum,\n    totalNum: user.totalNum,\n    numAchUnlocked: user.numAchUnlocked,\n    achievements: user.achievements,\n    weapons: user.weapons\n  }; // Finally, we update the user in the DB\n\n  const userUpdate = await User.findOneAndUpdate({\n    \"username\": username\n  }, newUser, {\n    new: true\n  });\n  res.json(userUpdate);\n} // A post metod to update user data in DB, but only the given fields\n\nexport async function updateUser(req, res) {\n  const {\n    previus_username,\n    username,\n    email,\n    _,\n    dob,\n    alreadyEncrypted\n  } = req.body;\n  var passwordHash = req.body.passwordHash;\n\n  if (alreadyEncrypted === false) {\n    passwordHash = crypto.createHash(\"sha512\").update(passwordHash).digest(\"base64\");\n  } // Validate if the new username and email are already in use\n\n\n  const doesEmailExists = await modelUser.isThisEmailInUse(email);\n  const doesUsernameExists = await modelUser.isThisUsernameInUse(username); // First, we retrieve the user from the DB\n\n  const users = await User.find();\n  const user = users.filter(u => u.username === previus_username)[0]; // Filtra por username\n  // If not found, we return an error\n\n  if (!user) {\n    return res.status(404).json({\n      error: \"El usuario no existe\"\n    });\n  } // If the new username and email are not in use, update the user\n\n\n  if (user.email !== email && doesEmailExists) {\n    return res.status(409).json({\n      error: \"Este email ya est치 siendo usado por otro usuario\",\n      invalidEmail: doesEmailExists\n    });\n  }\n\n  if (user.username !== username && doesUsernameExists) {\n    return res.status(409).json({\n      error: \"Este username ya est치 siendo utilizado por otro usuario\",\n      invalidUsername: doesUsernameExists\n    });\n  } // Then, we update the user with the given fields\n\n\n  const newUser = {\n    username: username,\n    email: email,\n    passwordHash: passwordHash,\n    dob: dob,\n    admin: user.admin,\n    img: user.img,\n    wins: user.wins,\n    coins: user.coins,\n    ordinaryNum: user.ordinaryNum,\n    generalNum: user.generalNum,\n    helmetNum: user.helmetNum,\n    totalNum: user.totalNum,\n    numAchUnlocked: user.numAchUnlocked,\n    achievements: user.achievements,\n    weapons: user.weapons\n  }; // Finally, we update the user in the DB\n\n  const userUpdate = await User.findOneAndUpdate({\n    \"username\": previus_username\n  }, newUser, {\n    new: true\n  });\n  return res.status(200).json(userUpdate);\n} //\n\nexport async function getStats(req, res) {\n  const users = await modelUser.find();\n  const totalUsers = users.length; //Count all coins from all users\n\n  const totalCoins = users.reduce((acc, cur) => acc + cur.coins, 0); //Count all wins from all users\n\n  const totalWins = users.reduce((acc, cur) => acc + cur.wins, 0); //Count all avgOrdinary from all users\n\n  const totalAvgOrdinary = users.reduce((acc, cur) => acc + cur.ordinaryNum, 0); //Count all avgGeneral from all users\n\n  const totalAvgGeneral = users.reduce((acc, cur) => acc + cur.generalNum, 0); //Count all avgHelmet from all users\n\n  const totalAvgHelmet = users.reduce((acc, cur) => acc + cur.helmetNum, 0); //Count all avgTotal from all users\n\n  const totalAvgTotal = users.reduce((acc, cur) => acc + cur.totalNum, 0);\n  const avgCoins = totalCoins / totalUsers;\n  const avgWins = totalWins / totalUsers;\n  const avgOrdinary = totalAvgOrdinary / totalUsers;\n  const avgGeneral = totalAvgGeneral / totalUsers;\n  const avgHelmet = totalAvgHelmet / totalUsers;\n  const avgTotal = totalAvgTotal / totalUsers;\n  const stats = {\n    avgCoins,\n    avgWins,\n    avgOrdinary,\n    avgGeneral,\n    avgHelmet,\n    avgTotal\n  };\n\n  if (stats) {\n    res.status(200).json(stats);\n  } else res.status(404).json({\n    error: \"No hay datos\"\n  });\n}\nexport async function countUsers(req, res) {\n  const users = await modelUser.find();\n  const totalUsers = users.length;\n  res.status(200).json({\n    userCount: totalUsers\n  });\n}\nexport async function getEnemyUser(req, res) {\n  const users = await modelUser.find();\n  const {\n    username\n  } = req.body;\n  const totalUsers = users.length;\n  var sameUser = true;\n  var enemyNum;\n  var enemy; // enemyNum = Math.floor(Math.random() * totalUsers);\n\n  while (sameUser == true) {\n    enemyNum = Math.floor(Math.random() * totalUsers);\n    enemy = users[enemyNum]; // console.log(enemy.username);\n\n    console.log(enemy);\n\n    if (enemy.username != username) {\n      sameUser = false;\n    }\n  }\n\n  res.status(200).json(enemy);\n}\nexport async function sendSupport(req, res) {\n  const {\n    message\n  } = req.body;\n  const newMessage = new modelMessage({\n    message\n  });\n  await newMessage.save();\n  res.json(newMessage);\n}","map":{"version":3,"names":["modelUser","modelMessage","User","crypto","getUsers","req","res","users","find","json","getUserData2","userData","username","params","getUserData","user","filter","u","query","putUserData","userputData","findOneAndUpdate","body","new","postUser","email","dob","passwordRegister","doesEmailExists","isThisEmailInUse","doesUsernameExists","isThisUsernameInUse","passwordHash","createHash","update","digest","usuario","admin","img","wins","coins","ordinaryNum","generalNum","helmetNum","totalNum","numAchUnlocked","achievements","weapons","save","status","invalidEmail","invalidUsername","error","deleteUser","findOneAndDelete","msg","doc","password","score","weapon","weapon2","weapon3","weapon4","userPost","insertOne","updateUserImg","newUser","userUpdate","updateUser","previus_username","_","alreadyEncrypted","getStats","totalUsers","length","totalCoins","reduce","acc","cur","totalWins","totalAvgOrdinary","totalAvgGeneral","totalAvgHelmet","totalAvgTotal","avgCoins","avgWins","avgOrdinary","avgGeneral","avgHelmet","avgTotal","stats","countUsers","userCount","getEnemyUser","sameUser","enemyNum","enemy","Math","floor","random","console","log","sendSupport","message","newMessage"],"sources":["C:/Users/garia/Documents/GitHub/JD-LSM/React Approach/LSM-app/src/API/api.controller.js"],"sourcesContent":["import modelUser from \"./api.model.user.js\";\r\nimport modelMessage from \"./api.model.support.js\";\r\nimport User from \"./api.model.user.js\";\r\n\r\n//const crypto = require(\"crypto-js\");\r\n\r\nimport crypto from \"crypto\";\r\n//import { toBePartiallyChecked } from \"@testing-library/jest-dom/dist/matchers.js\";\r\n\r\n// Get all registered users, funciona\r\nexport async function getUsers(req, res){\r\n\tconst users = await modelUser.find();\r\n\tres.json(users);\r\n}\r\n\r\nexport async function getUserData2(req, res){\r\n\tconst userData = await modelUser.find({\r\n\t\tusername: req.params.username,\r\n\t}\r\n\t);\r\n\tres.json(userData[0]);\r\n}\r\n\r\n// Get specific user data, funciona\r\nexport async function getUserData(req, res){\r\n\t// First, we retrieve the user from the DB\r\n\tconst users = await User.find();\r\n\tconst user = users.filter((u) => u.username === req.query.username)[0]; \r\n\treturn res.json(user);\r\n}\r\n\r\n// Put specific user data, funciona, poner datos en body\r\nexport async function putUserData(req, res){\r\n\tconst userputData = await modelUser.findOneAndUpdate({ \"username\" : req.params.username }, req.body, {\r\n\t\tnew: true,\r\n\t});\r\n\tres.json(userputData);\r\n}\r\n\r\n\r\n// Create a new user through sign up form\r\nexport async function postUser(req, res){\r\n\tconst {username, email, dob, passwordRegister } = req.body;\r\n\t\r\n\tconst doesEmailExists = await modelUser.isThisEmailInUse(email);\r\n\tconst doesUsernameExists = await modelUser.isThisUsernameInUse(username);\r\n\r\n\tif(!doesEmailExists && !doesUsernameExists){\r\n\t\tconst passwordHash = crypto.createHash(\"sha512\").update(passwordRegister).digest(\"base64\");\r\n\t\tconst usuario = new modelUser({username, email, passwordHash, admin: \"false\", img: \"\", dob, wins: 0, coins: \"0\",  ordinaryNum: 0, generalNum: 0,  helmetNum: 0,\r\n\t\ttotalNum: 0, coins: 0, numAchUnlocked: 0, achievements: [false, false, false, false, false, false], weapons: [false, false, false, false]});\r\n\t\tawait usuario.save();\r\n\t\tres.status(200).json({usuario, invalidEmail: doesEmailExists, invalidUsername: doesUsernameExists});\r\n\t}\r\n\telse{\r\n\t\tres.status(404).json({error: \"El usuario y/o email ya est치n siendo usados por otro usuario\", invalidEmail: doesEmailExists, invalidUsername: doesUsernameExists});\r\n\t}\t\r\n}\r\n\r\n// Delete user from DB\r\n// no funciona\r\nexport async function deleteUser(req, res){\r\n\tconst {username} = req.body;\r\n\tconst user = await modelUser.findOneAndDelete({ username: username });\r\n\tres.status(200).json({msg: \"User deleted.\"});\r\n}\r\n\r\n\r\n// No est치 bien\r\nexport async function user(req, res){\r\n\tconst doc = {username: res.params.users, admin: \"false\", email: res.params.email, wins: 0, dob: \"\", passwordHash: res.params.password, \r\n\tscore: \"0\", helmetNum: 0, ordinaryNum: 0, generalNum: 0, totalNum: 0, coins: 0, numAchUnlocked: 0, weapon: \"false\", \r\n\tweapon2: \"false\", weapon3: \"false\", weapon4: \"false\"};\r\n\tconst userPost = await postUser.insertOne(doc);\r\n}\r\n\r\nexport async function updateUserImg(req, res){\r\n\tconst {username, img } = req.body;\r\n\t\r\n\t// First, we retrieve the user from the DB\r\n\tconst users = await User.find();\r\n  \tconst user = users.filter((u) => u.username === username)[0]; // Filtra por username\r\n\r\n\t// Then, we update the user with the given fields\r\n\tconst newUser = {\t\r\n\t\tusername: user.username,\r\n\t\temail: user.email,\r\n\t\tpasswordHash: user.passwordHash,\r\n\t\tdob: user.dob,\r\n\t\tadmin: user.admin,\r\n\t\timg: img,\r\n\t\twins: user.wins,\r\n\t\tcoins: user.coins,\r\n\t\tordinaryNum: user.ordinaryNum,\t\r\n\t\tgeneralNum: user.generalNum,\r\n\t\thelmetNum: user.helmetNum,\r\n\t\ttotalNum: user.totalNum,\r\n\t\tnumAchUnlocked: user.numAchUnlocked,\r\n\t\tachievements: user.achievements,\r\n\t\tweapons: user.weapons}\r\n\r\n\t// Finally, we update the user in the DB\r\n\tconst userUpdate = await User.findOneAndUpdate({ \"username\" : username }, newUser, {\r\n\t\tnew: true,\r\n\t});\r\n\tres.json(userUpdate);\r\n}\r\n\r\n// A post metod to update user data in DB, but only the given fields\r\nexport async function updateUser(req, res){\r\n\r\n\r\n\tconst {previus_username, username, email, _ , dob, alreadyEncrypted } = req.body;\r\n\tvar passwordHash = req.body.passwordHash;\r\n\r\n\tif (alreadyEncrypted === false) {\r\n\t\tpasswordHash = crypto.createHash(\"sha512\").update(passwordHash).digest(\"base64\");\r\n\t}\r\n\r\n\t// Validate if the new username and email are already in use\r\n\tconst doesEmailExists = await modelUser.isThisEmailInUse(email);\r\n\tconst doesUsernameExists = await modelUser.isThisUsernameInUse(username);\r\n\r\n\t// First, we retrieve the user from the DB\r\n\tconst users = await User.find();\r\n  \tconst user = users.filter((u) => u.username === previus_username)[0]; // Filtra por username\r\n\r\n\t// If not found, we return an error\r\n\tif(!user){\r\n\t\treturn res.status(404).json({error: \"El usuario no existe\"});\r\n\t}\r\n\r\n\r\n\t// If the new username and email are not in use, update the user\r\n\tif(user.email !== email && doesEmailExists){\r\n\t\treturn res.status(409).json({error: \"Este email ya est치 siendo usado por otro usuario\", invalidEmail: doesEmailExists});\r\n\t}\r\n\tif (user.username !== username && doesUsernameExists) {\r\n\t\treturn res.status(409).json({error: \"Este username ya est치 siendo utilizado por otro usuario\", invalidUsername: doesUsernameExists});\r\n\t}\r\n\r\n\t// Then, we update the user with the given fields\r\n\tconst newUser = {\t\r\n\t\tusername: username,\r\n\t\temail: email,\r\n\t\tpasswordHash: passwordHash,\r\n\t\tdob: dob,\r\n\t\tadmin: user.admin,\r\n\t\timg: user.img,\r\n\t\twins: user.wins,\r\n\t\tcoins: user.coins,\r\n\t\tordinaryNum: user.ordinaryNum,\t\r\n\t\tgeneralNum: user.generalNum,\r\n\t\thelmetNum: user.helmetNum,\r\n\t\ttotalNum: user.totalNum,\r\n\t\tnumAchUnlocked: user.numAchUnlocked,\r\n\t\tachievements: user.achievements,\r\n\t\tweapons: user.weapons}\r\n\r\n\r\n\t// Finally, we update the user in the DB\r\n\tconst userUpdate = await User.findOneAndUpdate({ \"username\" : previus_username }, newUser, {\r\n\t\tnew: true,\r\n\t});\r\n\treturn res.status(200).json(userUpdate);\r\n\r\n}\r\n\r\n//\r\nexport async function getStats(req, res){\r\n\tconst users = await modelUser.find();\r\n\tconst totalUsers = users.length;\r\n\t//Count all coins from all users\r\n\tconst totalCoins = users.reduce((acc, cur) => acc + cur.coins, 0);\r\n\t//Count all wins from all users\r\n\tconst totalWins = users.reduce((acc, cur) => acc + cur.wins, 0);\r\n\t//Count all avgOrdinary from all users\r\n\tconst totalAvgOrdinary = users.reduce((acc, cur) => acc + cur.ordinaryNum, 0);\r\n\t//Count all avgGeneral from all users\r\n\tconst totalAvgGeneral = users.reduce((acc, cur) => acc + cur.generalNum, 0);\r\n\t//Count all avgHelmet from all users\r\n\tconst totalAvgHelmet = users.reduce((acc, cur) => acc + cur.helmetNum, 0);\r\n\t//Count all avgTotal from all users\r\n\tconst totalAvgTotal = users.reduce((acc, cur) => acc + cur.totalNum, 0);\r\n\r\n\t\r\n\tconst avgCoins = totalCoins / totalUsers;\r\n\tconst avgWins = totalWins / totalUsers;\r\n\tconst avgOrdinary = totalAvgOrdinary / totalUsers;\r\n\tconst avgGeneral = totalAvgGeneral / totalUsers;\r\n\tconst avgHelmet = totalAvgHelmet / totalUsers;\r\n\tconst avgTotal = totalAvgTotal / totalUsers;\r\n\tconst stats = {avgCoins, avgWins, avgOrdinary, avgGeneral, avgHelmet, avgTotal};\r\n\tif (stats) {\r\n\tres.status(200).json(stats);\r\n}else\r\n\tres.status(404).json({error: \"No hay datos\"});\r\n}\r\n\r\nexport async function countUsers(req, res){\r\n\tconst users = await modelUser.find();\r\n\tconst totalUsers = users.length;\r\n\tres.status(200).json({userCount: totalUsers});\r\n}\r\n\r\nexport async function getEnemyUser(req, res){\r\n\tconst users = await modelUser.find();\r\n\tconst {username} = req.body;\r\n\tconst totalUsers = users.length;\r\n\tvar sameUser = true;\r\n\tvar enemyNum;\r\n\tvar enemy;\r\n\t// enemyNum = Math.floor(Math.random() * totalUsers);\r\n\r\n\twhile (sameUser == true) {\r\n\t\tenemyNum = Math.floor(Math.random() * totalUsers);\r\n\t\tenemy = users[enemyNum];\r\n\t\t// console.log(enemy.username);\r\n\t\tconsole.log(enemy);\r\n\t\tif (enemy.username != username){\r\n\t\t\tsameUser = false;\r\n\t\t}\r\n\t}\r\n\r\nres.status(200).json(enemy);\r\n}\r\n\r\nexport async function sendSupport(req, res){\r\n\tconst {message} = req.body;\r\n\tconst newMessage = new modelMessage({message});\r\n\tawait newMessage.save();\r\n\tres.json(newMessage);\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}